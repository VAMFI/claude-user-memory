#!/usr/bin/env bash
# Agentic Substrate v3.1 - Global Installation Script
# The foundational layer for Claude Code superintelligence
# Installs to ~/.claude/ with automatic backup

set -e

echo "üöÄ Agentic Substrate v3.1"
echo "The foundational layer for Claude Code superintelligence"
echo "NEW v3.1: Agents That Learn - Adaptive learning from past implementations"
echo "============================================================"
echo ""

# Get the directory where this script is located
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
CLAUDE_SOURCE="$SCRIPT_DIR/.claude"
CLAUDE_TARGET="$HOME/.claude"

# Check if source .claude directory exists
if [ ! -d "$CLAUDE_SOURCE" ]; then
    echo "‚ùå Error: .claude directory not found in $SCRIPT_DIR"
    echo "   Make sure you're running this script from the repository root."
    exit 1
fi

# Backup existing .claude if it exists
if [ -d "$CLAUDE_TARGET" ]; then
    BACKUP_DIR="$HOME/.claude.backup-$(date +%Y%m%d-%H%M%S)"
    echo "üì¶ Existing .claude found - creating backup..."
    echo "   Backing up to: $BACKUP_DIR"
    cp -r "$CLAUDE_TARGET" "$BACKUP_DIR"
    echo "   ‚úÖ Backup complete!"
    echo ""
fi

# Install to home directory
echo "üìã Installing workflow system to $CLAUDE_TARGET..."
# Remove existing directory if it exists (already backed up)
rm -rf "$CLAUDE_TARGET"
# Create target directory
mkdir -p "$CLAUDE_TARGET"
# Copy contents of .claude to ~/.claude
cp -r "$CLAUDE_SOURCE"/* "$CLAUDE_TARGET"/
echo "   ‚úÖ Files copied!"
echo ""

# Make hooks executable
echo "üîß Making hooks and validators executable..."
chmod +x "$CLAUDE_TARGET/hooks"/*.sh 2>/dev/null || true
chmod +x "$CLAUDE_TARGET/validators"/*.sh 2>/dev/null || true
chmod +x "$CLAUDE_TARGET/metrics"/*.sh 2>/dev/null || true
echo "   ‚úÖ Permissions set!"
echo ""

# Install user-level CLAUDE.md (system-wide documentation)
echo "üìñ Installing user-level documentation..."
if [ -f "$CLAUDE_SOURCE/templates/CLAUDE.md.user-level" ]; then
    cp "$CLAUDE_SOURCE/templates/CLAUDE.md.user-level" "$CLAUDE_TARGET/CLAUDE.md"
    echo "   ‚úÖ User-level CLAUDE.md installed!"
    echo "      System-wide Agentic Substrate documentation available in all projects"
else
    echo "   ‚ö†Ô∏è  User-level CLAUDE.md template not found (skipping)"
fi
echo ""

# Success message
echo "‚úÖ Installation complete!"
echo ""
echo "üìö What was installed:"
echo ""
echo "   üìñ User-level documentation:"
echo "      ‚Ä¢ ~/.claude/CLAUDE.md - System-wide Agentic Substrate reference"
echo "         (Available in ALL projects, integrates with Project Brahma)"
echo ""
echo "   ü§ñ Agents (9 specialized - Complete BUILD-FIX-SERVE coverage):"
echo "      Tier 1 (Orchestrator):"
echo "      ‚Ä¢ chief-architect - Master orchestrator with parallel multi-agent mode"
echo ""
echo "      Tier 2 (Core Workflow - 5 agents):"
echo "      ‚Ä¢ docs-researcher - High-speed documentation with contextual retrieval"
echo "      ‚Ä¢ implementation-planner - Strategic architect with minimal changes"
echo "      ‚Ä¢ brahma-analyzer - Quality gate (80+ score) before implementation"
echo "      ‚Ä¢ code-implementer - Precision execution with TDD & 3-retry self-correction"
echo "      ‚Ä¢ brahma-investigator - Root-cause analysis with think protocol (3-retry)"
echo ""
echo "      Tier 3 (Production - 3 agents):"
echo "      ‚Ä¢ brahma-deployer - Canary deployments with auto-rollback"
echo "      ‚Ä¢ brahma-monitor - Observability (Metrics, Logs, Traces)"
echo "      ‚Ä¢ brahma-optimizer - Performance tuning & auto-scaling"
echo ""
echo "   üéì Skills (5 auto-invoked):"
echo "      ‚Ä¢ research-methodology - Systematic documentation gathering"
echo "      ‚Ä¢ planning-methodology - Minimal-change, reversible planning"
echo "      ‚Ä¢ quality-validation - Multi-modal validation (API + Philosophy)"
echo "      ‚Ä¢ pattern-recognition - Automatic knowledge capture"
echo "      ‚Ä¢ context-engineering - Active context curation (39% improvement)"
echo ""
echo "   ‚ö° Commands (5 slash commands):"
echo "      ‚Ä¢ /research - Quick documentation research"
echo "      ‚Ä¢ /plan - Quick implementation planning"
echo "      ‚Ä¢ /implement - Execute plan with self-correction"
echo "      ‚Ä¢ /workflow - Complete automation (all phases)"
echo "      ‚Ä¢ /context - Analyze and optimize context configuration"
echo ""
echo "   üîí Quality Gates (8 hooks):"
echo "      ‚Ä¢ validate-research-pack.sh - Research quality (80+ score)"
echo "      ‚Ä¢ validate-implementation-plan.sh - Plan quality (85+ score)"
echo "      ‚Ä¢ auto-format.sh - Code formatting"
echo "      ‚Ä¢ run-tests.sh - Continuous validation"
echo "      ‚Ä¢ update-knowledge-core.sh - Pattern capture"
echo "      ‚Ä¢ suggest-context-edits.sh - Context optimization hints"
echo "      ‚Ä¢ check-agent-economics.sh - Multi-agent cost/benefit"
echo "      ‚Ä¢ [Pre/Post-ToolUse, PreAgentSpawn, Stop hooks]"
echo ""
echo "   üÜï New in v3.0 (Agentic Substrate):"
echo "      ‚Ä¢ Think tool protocol - 54% improvement on complex decisions"
echo "      ‚Ä¢ Context engineering - 39% improvement, 84% token reduction"
echo "      ‚Ä¢ Multi-agent parallel - 90.2% performance gain"
echo "      ‚Ä¢ Contextual retrieval - 49-67% better research"
echo "      ‚Ä¢ TDD enforcement - Test-first workflow (Anthropic's favorite)"
echo "      ‚Ä¢ Git operations - Automated commits with co-authoring"
echo "      ‚Ä¢ Extended thinking - think, think hard, think harder, ultrathink"
echo "      ‚Ä¢ Memory management - Import syntax, modular organization"
echo "      ‚Ä¢ Philosophy research - Quality validation for thematic analysis"
echo "      ‚Ä¢ .mcpb packaging - One-click Desktop Extension install"
echo ""
echo "   üìä Performance (from Anthropic research):"
echo "      ‚Ä¢ Complex tasks: 54% improvement (think tool)"
echo "      ‚Ä¢ Research accuracy: 49-67% improvement (contextual retrieval)"
echo "      ‚Ä¢ Context optimization: 39% improvement, 84% token reduction"
echo "      ‚Ä¢ Multi-agent mode: 90.2% performance gain, 90% time reduction"
echo "      ‚Ä¢ Typical feature: 10-25 min (vs 55-120 min without)"
echo ""
echo "üéØ Quick Start:"
echo "   1. Start Claude Code CLI"
echo "   2. Try: /workflow Add weather API integration"
echo "   3. Or step-by-step: /research ‚Üí /plan ‚Üí /implement"
echo ""

if [ -n "$BACKUP_DIR" ]; then
    echo "üíæ Restore Previous Configuration:"
    echo "   If you want to restore your previous setup:"
    echo "   rm -rf ~/.claude && mv $BACKUP_DIR ~/.claude"
    echo ""
fi

echo "üìñ Documentation:"
echo "   ‚Ä¢ README.md - Quick reference and feature overview"
echo "   ‚Ä¢ PHILOSOPHY.md - Philia Sophia synthesis (Anthropic + VAMFI)"
echo "   ‚Ä¢ .claude/templates/ - Agent, skill, and workflow overviews"
echo "   ‚Ä¢ CLAUDE.md - Memory management and extended thinking"
echo ""
echo "üöÄ Next Steps:"
echo "   1. Review PHILOSOPHY.md to understand the Anthropic synthesis"
echo "   2. Run '/context analyze' to optimize your context"
echo "   3. Try 'ultrathink' keyword for complex architecture decisions"
echo "   4. Use '/workflow' for complete automation"
echo ""
echo "üåü Thank you for using Agentic Substrate!"
echo "   Built on Anthropic's engineering philosophy + VAMFI's Brahma orchestration"
echo "   Report issues: https://github.com/VAMFI/claude-user-memory/issues"
echo "   Star the repo: https://github.com/VAMFI/claude-user-memory"
echo ""
echo "JAI GANESH. JAI BHOLE. HAPPY DHANTERAS! ü™î"
echo ""

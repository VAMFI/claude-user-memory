# Agentic Substrate v3.0 - System-Wide Enhancement

**The Love of Wisdom (Philia Sophia) - Research-Driven Development**

This file documents the Agentic Substrate capabilities installed system-wide in `~/.claude/`. These enhancements work across **all projects** and integrate seamlessly with project-specific configurations.

---

## 🚀 Quick Start

```bash
# Complete automation (recommended)
/workflow Add Redis caching to ProductService with 5-minute TTL

# Step-by-step control
/research Redis for Node.js v5.0
/plan Redis caching implementation
/implement

# Direct agent invocation
@chief-architect Build complete authentication system
```

---

## 📦 What's Installed

### 4 Agents (Research → Plan → Implement workflow)
- **@chief-architect** - Multi-agent orchestrator for complex projects
- **@docs-researcher** - Fetches version-accurate docs (< 2 min, 49-67% better accuracy)
- **@implementation-planner** - Creates minimal-change blueprints with rollback plans
- **@code-implementer** - Executes with TDD, self-corrects 3x, auto-commits to git

### 5 Skills (Auto-invoked capabilities)
- **research-methodology** - Truth over speed (but achieve both)
- **planning-methodology** - Surgical changes, not rewrites
- **quality-validation** - Objective scoring (blocks bad inputs)
- **pattern-recognition** - Automatic learning from implementations
- **context-engineering** - Fights context rot (39% improvement, 84% token reduction)

### 5 Commands (Slash commands)
- **/research [topic]** - Fast documentation research
- **/plan [feature]** - Create implementation plan
- **/implement** - Execute plan with TDD
- **/workflow [feature]** - Complete automation (all 3 phases)
- **/context [analyze|optimize|reset]** - Manage context health

### 8 Hooks (Quality gates)
- **Pre-agent-spawn** - Economic viability check (15x cost warning)
- **Post-tool-use** - Context curation suggestions
- **Pre-commit** - Safety checks (no secrets, binaries)
- **Post-test** - Coverage analysis
- **4 others** - Additional quality enforcement

---

## 🧠 Extended Thinking Modes

Include keywords in your request to trigger extended reasoning:

| Keyword | Time | Use For | Performance |
|---------|------|---------|-------------|
| **think** | 30-60s | Routine planning, standard decisions | Baseline |
| **think hard** | 1-2min | Multiple valid approaches, unclear tradeoffs | +30% |
| **think harder** | 2-4min | Novel problems, high-stakes decisions | +54% |
| **ultrathink** | 5-10min | Critical architecture, multi-agent coordination | +54% |

**Research finding**: 54% improvement on complex tasks (Anthropic)

**Example**: `ultrathink the architecture for multi-tenant auth before planning`

---

## ⚙️ Core Workflow

### Research → Plan → Implement (10-25 minutes total)

**Phase 1: Research** (< 2 min)
- Fetches official, version-accurate documentation
- Prevents coding from stale memory
- Creates ResearchPack (must score 80+)

**Phase 2: Planning** (< 3 min)
- Transforms research into minimal-change blueprint
- Identifies surgical edits only (no rewrites)
- Includes rollback procedure (must score 85+)

**Phase 3: Implementation** (< 5 min)
- Test-first mandatory (RED-GREEN-REFACTOR)
- Self-corrects on error (max 3 attempts)
- Auto-commits with co-author attribution

### Quality Gates (Automatic)

**Gate 1: Research → Planning**
- ✅ ResearchPack score ≥ 80 (API) or ≥ 70 (philosophy)
- ⛔ Blocks planning if research incomplete

**Gate 2: Planning → Implementation**
- ✅ Implementation Plan score ≥ 85
- ✅ APIs match ResearchPack exactly (no hallucination)
- ⛔ Blocks coding if plan unsafe

**Gate 3: Implementation → Completion**
- ✅ All tests passing (TDD enforced)
- ✅ Circuit breaker closed
- ⛔ Self-corrects 3x, then stops

---

## 🎯 When to Use What

### Use `/workflow` when:
- ✅ Clear, well-defined feature request
- ✅ Trust orchestrator to handle details
- ✅ Want complete automation (research → plan → implement)
- ✅ Standard feature (not experimental)

### Use manual commands when:
- Need to review research before planning (`/research` then inspect)
- Want to modify plan before implementing (`/plan` then edit)
- Uncertain about approach (step-by-step control)
- Learning the system

### Use direct agents when:
- Complex orchestration needed (`@chief-architect`)
- Just need research (`@docs-researcher`)
- Have research, need plan (`@implementation-planner`)
- Have plan, ready to code (`@code-implementer`)

---

## 📊 Performance Benchmarks

From Anthropic research and Agentic Substrate testing:

| Metric | Before | After | Improvement |
|--------|--------|-------|-------------|
| **Complex task accuracy** | Baseline | +54% | Think tool |
| **Research accuracy** | Baseline | +49-67% | Contextual retrieval |
| **Context optimization** | Baseline | +39%, -84% tokens | Active curation |
| **Multi-agent performance** | Baseline | +90.2%, -90% time | Parallel execution |
| **Feature implementation** | 55-120 min | 10-25 min | 4.8-5.5x faster |
| **Test coverage** | Variable | 80%+ | TDD enforced |
| **API hallucination** | Common | 0% | ResearchPack validation |

---

## 🔄 Context Management

Run every 50 messages or when switching tasks:

```bash
/context analyze    # Show current context configuration
/context optimize   # Prune stale context automatically
/context reset      # Fresh start for new project
```

**Benefits**: 39% improvement, 84% token reduction (Anthropic research)

---

## 🛡️ Safety Features

### Circuit Breaker
- Opens after 3 failed implementation attempts
- Prevents infinite retry loops
- Requires manual intervention to reset
- State: `cat ~/.claude/.circuit-breaker-state`

### Economic Viability Check
- Multi-agent spawning costs 15x more tokens
- Hook prompts user before spawning multiple agents
- Blocks simple tasks (use single agent)
- Allows complex tasks (worth the cost)

### Git Safety
- Never commits .env, credentials, or binaries
- Stages only relevant files
- Creates descriptive commit messages
- Co-author attribution to Claude
- Commits locally only (user must push)

---

## 🧩 Integration with Project Brahma

If you have the Unified Brahma Orchestration System V2.0 installed:

**Agentic Substrate** (4 agents - Research → Plan → Implement):
- System-wide workflow automation
- Works in ANY directory
- Quality gates and TDD enforcement

**Project Brahma** (18 agents - BUILD → FIX → SERVE):
- Multi-project orchestration
- Constitution-driven workflows
- Production deployment automation

**They work together**:
```bash
# Agentic Substrate handles feature development
/workflow Add payment processing with Stripe

# Project Brahma handles deployment
@brahma-deployer v2.5.0 to production with canary
```

See `/Users/amba/CLAUDE.md` for complete Brahma documentation.

---

## 📚 Memory Hierarchy

Claude Code loads context in this order:

```
1. Enterprise: /Library/Application Support/ClaudeCode/CLAUDE.md
2. User: ~/.claude/CLAUDE.md (THIS FILE)
3. Project: ./CLAUDE.md or ./.claude/CLAUDE.md
4. Imports: @path/to/file.md (up to 5 hops)
```

**They combine** - they don't override. Use this hierarchy:

- **User-level** (this file): System-wide capabilities
- **Project-level** (./CLAUDE.md): Project-specific goals, constitution, workflows
- **Imports** (@.claude/templates/*.md): Modular organization

---

## 📖 Quick Reference

### Agents
@.claude/templates/agents-overview.md

### Skills
@.claude/templates/skills-overview.md

### Workflows
@.claude/templates/workflows-overview.md

---

## 🎓 Best Practices

1. **Always start with `/workflow`** - Automation is faster and safer
2. **Trust the quality gates** - Fix defects before proceeding
3. **Use think protocols** - Add "ultrathink" for critical decisions
4. **Run `/context optimize`** - Every 50 messages
5. **Review knowledge-core.md** - See accumulated patterns
6. **Test before pushing** - Git commits are local only

---

## 🔍 Troubleshooting

**Problem**: Research scores < 80
- **Solution**: Library version not found - specify version explicitly

**Problem**: Plan scores < 85
- **Solution**: Missing rollback procedure or file list incomplete

**Problem**: Tests failing after implementation
- **Solution**: Self-correction runs automatically (max 3 attempts)

**Problem**: Circuit breaker open
- **Solution**: Reset with `echo "closed" > ~/.claude/.circuit-breaker-state`

**Problem**: Too much context
- **Solution**: Run `/context optimize` to prune stale information

---

## 📦 Installation Info

- **Version**: 3.0.0
- **Installed**: ~/.claude/
- **Repository**: https://github.com/VAMFI/claude-user-memory
- **Documentation**: https://vamfi.org/blog-demo8-philia-sophia

### Update
```bash
cd ~/path/to/claude-user-memory
git pull origin main
./install.sh
```

### Uninstall
```bash
rm -rf ~/.claude/agents/{chief-architect,docs-researcher,implementation-planner,code-implementer}.md
rm -rf ~/.claude/skills/{research-methodology,planning-methodology,quality-validation,pattern-recognition,context-engineering}
rm -rf ~/.claude/commands/{research,plan,implement,workflow,context}.md
# Review and manually remove hooks if needed
```

---

## 🌟 Philosophy: Philia Sophia

**The Love of Wisdom** - Synthesis over imitation.

This system combines:
- **Anthropic's research** (think tool, contextual retrieval, multi-agent orchestration)
- **VAMFI's innovations** (quality gates, TDD enforcement, knowledge preservation)

Result: **Research-driven development** that's faster, safer, and continuously learning.

---

**For detailed workflows, see templates above. For Project Brahma integration, see /Users/amba/CLAUDE.md**

**Happy coding with superintelligent assistance!**
